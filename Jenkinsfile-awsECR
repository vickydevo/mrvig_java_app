@Library('mr_jenkins_shared_lib') _

pipeline {
    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'choose create/Destroy')
        string(name:'aws_account_id', description: "Account Id no", defaultValue:'785600726584')
        string(name:'region', description: "Name of the region", defaultValue:'us-east-1')
        string(name:'ecr_repoName', description: "name of ecr_repoName", defaultValue:'arya')
    }
    stages {
            
        stage ('git checkout') {
        when { expression { params.action=='create'}}
            steps {
                script {
                    gitCheckout(
                        branch: "master",
                        url: "https://github.com/vickydevo/mrvig_java_app.git"
                    )
                }
            }
        }
   

        stage ('Unit Test maven') {

        when { expression { params.action=='create'}}
            steps {       
                script {
                   mvnTest()

                }
            }
        }

        stage ('Integration Test maven') {

        when { expression { params.action=='create'}  }  
            steps {

                 script {
                   mvnIntegrationTest()
                }
            }
        }


         stage ('static code analysis : sonarqube') {

         when { expression { params.action=='create'}  }  
            steps {
                script {

// but how u will fetch sonarqube credential id / AUTHENTICATION 
    // go pipeline syntax ----> steps ---> sample steps --->withSonarQubeEnv
    //  select sonarqube credential key   -----> generate pipeline script 

// withSonarQubeEnv(credentialsId: 'SONAR-API-VIG')

                    def SonarQubecredentialsId = 'SONAR-API-VIG'
                   statiCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }

         stage ('Quality Gate status  check: sonarQube') {

         when { expression { params.action=='create'}  }  
            steps {
                script {

                // but how u will fetch sonarqube credential id / AUTHENTICATION 
    // go pipeline syntax ----> steps ---> sample steps --->waitForQualityGate
    //  select sonarqube credential key   -----> generate pipeline script 

                // waitForQualityGate abortPipeline: false, credentialsId: 'SONAR-API-VIG'
                    def SonarQubecredentialsId = 'SONAR-API-VIG'
                   QualityGateStatus(SonarQubecredentialsId)
                }
            }
        }

        stage ('MAVEN BUILD') {

         when { expression { params.action=='create'}  }  
            steps {
                script {

                    mvnBuild()
                }
            }
        }

        stage ('Docker BUILD : ECR') {

         when { expression { params.action=='create'}  }  
            steps {
                script {

                   dockerBuild("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
            }
        }

        stage ('DockerECR scan image :trivy') {

         when { expression { params.action=='create'}  }  
            steps {
                script {

                    dockerImageScan("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
            }
        }

         stage('Docker push image :ECR') {

         when { expression { params.action=='create'}  }  
            steps {
                script {

                    dockerImagePush("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
            }
        }

        stage('DockerImageCleanUp :ECR') {

         when { expression { params.action=='create'}  }  
            steps {
                script {

                    dockerImageCleanup("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
            }
        }



    }

}   
